---
- name: Set pCloud token from environment
  ansible.builtin.set_fact:
    pcloud_token: "{{ lookup('env', 'PCLOUD_TOKEN') }}"
  when: lookup('env', 'PCLOUD_TOKEN') | default('') != ''

- name: Retrieve pCloud token from Bitwarden
  ansible.builtin.set_fact:
    pcloud_token: >-
      {{ lookup(
        'bitwarden.secrets',
        'item',
        item_id=token_item_id,
        client_id=client_id,
        client_secret=client_secret,
        password=password,
      ) }}
  when: pcloud_token | default('') == ''

- name: Install rclone
  ansible.builtin.apt:
    name: rclone
    state: present
    update_cache: true
  become: true

- name: Install fuse for rclone
  ansible.builtin.apt:
    name: fuse
    state: present
  become: true

- name: Create pcloud_users group
  ansible.builtin.group:
    name: "{{ pcloud_group }}"
    gid: "{{ pcloud_gid }}"
    state: present
  become: true

- name: Create mountpoint
  ansible.builtin.file:
    path: "{{ pcloud_mount_point }}"
    state: directory
    mode: '0770'
    owner: root
    group: "{{ pcloud_group }}"
  become: true

- name: Check if mountpoint is already mounted
  ansible.builtin.command: mountpoint -q {{ pcloud_mount_point }}
  register: pcloud_mount_check
  changed_when: false
  failed_when: false
  become: true

- name: Look for leftover files in mountpoint
  ansible.builtin.find:
    paths: "{{ pcloud_mount_point }}"
    file_type: any
  register: pcloud_mount_files
  when: pcloud_mount_check.rc != 0
  become: true

- name: Remove leftover files from mountpoint
  ansible.builtin.file:
    path: "{{ pcloud_mount_point }}"
    state: absent
  when:
    - pcloud_mount_check.rc != 0
    - pcloud_mount_files.matched > 0
  become: true

- name: Recreate mountpoint
  ansible.builtin.file:
    path: "{{ pcloud_mount_point }}"
    state: directory
    mode: '0770'
    owner: root
    group: "{{ pcloud_group }}"
  when:
    - pcloud_mount_check.rc != 0
    - pcloud_mount_files.matched > 0
  become: true

- name: Create directory for rclone config
  ansible.builtin.file:
    path: "/etc/rclone"
    state: directory
    mode: '0755'
    owner: root
    group: root
  become: true

- name: Configure rclone credentials file
  ansible.builtin.template:
    src: rclone.conf.j2
    dest: "{{ pcloud_config_file }}"
    mode: '0600'
    owner: root
    group: root
  become: true

- name: Create log file for rclone
  ansible.builtin.file:
    path: "{{ pcloud_log_file }}"
    state: touch
    mode: '0644'
    owner: root
    group: root
  become: true

- name: Create rclone cache directory
  ansible.builtin.file:
    path: "/var/cache/rclone"
    state: directory
    mode: '0755'
    owner: root
    group: root
  become: true

- name: Generate rclone-pcloud systemd service
  ansible.builtin.template:
    src: rclone-pcloud.service.j2
    dest: "{{ pcloud_service_file }}"
    mode: '0644'
    owner: root
    group: root
  become: true

- name: Reload systemd daemon
  ansible.builtin.systemd:
    daemon_reload: true
  become: true

- name: Enable and start rclone-pcloud service
  ansible.builtin.systemd:
    name: rclone-pcloud.service
    enabled: true
    state: started
  become: true
